name: Android Release

on:
  push:
    tags:
      - 'v*'   # Trigger on tags like v1.0.0
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag name (e.g., v1.0.0)"
        required: true

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout code
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2. Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17

      # 3. Cache Gradle
      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 4. Grant execute permission for gradlew
      - name: Grant execute permission
        run: chmod +x gradlew

      # 5. Resolve tag from push or workflow_dispatch
      - name: Resolve or create tag
        id: tag
        run: |
          if [ "${GITHUB_REF_TYPE}" = "tag" ]; then
            echo "tag=${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT
          # else
          #   TAG="${{ github.event.inputs.tag }}"
          #   git config user.name "github-actions"
          #   git config user.email "github-actions@github.com"
          #   git tag "$TAG"
          #   git push "https://x-access-token:${{ secrets.GH_PAT }}@github.com/${{ github.repository }}.git" "$TAG"
          #   echo "tag=$TAG" >> $GITHUB_OUTPUT
          fi

      # 6. Build release APK
      - name: Build Release APK
        run: ./gradlew assembleRelease

      # 7. Debug: List generated APKs
      - name: List APKs
        run: ls -l app/build/outputs/apk/release/

      # 8. Decode Keystore
      - name: Decode Keystore
        run: echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > keystore.jks

      # 9. Sign APK dynamically
      - name: Sign APK
        run: |
          APK=$(ls app/build/outputs/apk/release/*release*.apk)
          echo "Signing $APK"
          jarsigner -verbose \
            -sigalg SHA256withRSA -digestalg SHA-256 \
            -keystore keystore.jks \
            -storepass ${{ secrets.KEYSTORE_PASSWORD }} \
            -keypass ${{ secrets.KEY_PASSWORD }} \
            "$APK" \
            ${{ secrets.KEY_ALIAS }}

      # 10. Zipalign & rename dynamically
      - name: Zipalign APK
        run: |
          APK=$(ls app/build/outputs/apk/release/*release*.apk)
          echo "Zipaligning $APK -> spot-${{ steps.tag.outputs.tag }}.apk"
          $ANDROID_HOME/build-tools/34.0.0/zipalign -v -p 4 \
            "$APK" \
            app/build/outputs/apk/release/spot-${{ steps.tag.outputs.tag }}.apk

      # 11. Optional: Print SHA1 of key
      - name: Print release SHA1
        run: |
          keytool -list -v \
            -keystore keystore.jks \
            -alias ${{ secrets.KEY_ALIAS }} \
            -storepass ${{ secrets.KEYSTORE_PASSWORD }} \
            -keypass ${{ secrets.KEY_PASSWORD }} \
            | grep "SHA1"

      # 12. Create GitHub Release using PAT
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          name: Release ${{ steps.tag.outputs.tag }}
          files: "app/build/outputs/apk/release/spot-${{ steps.tag.outputs.tag }}.apk"
          overwrite_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
